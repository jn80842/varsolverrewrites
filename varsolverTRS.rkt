#lang racket

(require "halide-parser.rkt")
(require "trat/termIR.rkt")
(require "trat/matching.rkt")

(provide originalvarsolverTRS normalize normalize->termIR)

(define originalvarsolverTRS-halide (list
(cons "(t0 - n0) + n1" "t0 + (n1 - n0)")
(cons "(t0 + n0) + n1" "t0 + (n0 + n1)")
(cons "t0 + t0" "t0 * 2")
(cons "(t0 + n0) + t1" "(t0 + t1) + n0")
(cons "(t0 - n0) + t1" "(t0 + t1) - n0")
(cons "(t0 * x) + (t0 * y)" "t0 * (x + y)")
(cons "(t0 * x) + (t1 * x)" "(t0 + t1) * x")
(cons "(t0 * x) + t0" "t0 * (x + 1)")
(cons "t0 + (t0 * x)" "t0 * (x + 1)")
(cons "n0 + t0" "t0 + n0")
(cons "(t0 - n1) - n0" "t0 - (n1 + n0)")
(cons "(t0 + n1) - n0" "t0 + (n1 - n0)")
(cons "n0 - (t0 - n1)" "(t0 * -1) + (n0 + n1)")
(cons "n0 - (t0 + n1)" "(t0 * -1) + (n0 - n1)")
(cons "n0 - t0" "(t0 * -1) + n0")
(cons "(t0 + n1) - t1" "(t0 - t1) + n1")
(cons "(t0 - n1) - t1" "(t0 - t1) - n1")
(cons "(t0 * x) - (t0 * y)" "t0 * (x - y)")
(cons "(t0 * x) - (t1 * x)" "(t0 - t1) * x")
(cons "n0 * t0" "t0 * n0")
(cons "(t0 + n0) * n1" "t0 * n1 + n0 * n1")
(cons "(t0 - n0) * n1" "t0 * n1 - n0 * n1")
(cons "(t0 * n0) * n1" "t0 * (n0 * n1)")
(cons "max(n0, t0)" "max(t0, n0)")
(cons "max(t0, t0)" "t0")
(cons "max(max(t0, n0), t1)" "max(max(t0, t1), n0)")
(cons "max(t0 + n0, t0 + n1)" "t0 + max(n0, n1)")
(cons "max(t0 + n0, t1 + n0)" "max(t0, t1) + n0")
(cons "max(t0 + n0, t0)" "t0 + max(n0, 0)")
(cons "max(t0, t0 + n0)" "t0 + max(n0, 0)")
(cons "max(t0 - n0, t1 - n0)" "max(t0, t1) - n0")
(cons "max(t0 - n0, t0)" "t0 - min(n0, 0)")
(cons "max(t0, t0 - n0)" "t0 - min(n0, 0)")
(cons "min(n0, t0)" "min(t0, n0)")
(cons "min(t0, t0)" "t0")
(cons "min(min(t0, n0), t1)" "min(min(t0, t1), n0)")
(cons "min(t0 + n0, t0 + n1)" "t0 + min(n0, n1)")
(cons "min(t0 + n0, t1 + n0)" "min(t0, t1) + n0")
(cons "min(t0 + n0, t0)" "t0 + min(n0, 0)")
(cons "min(t0, t0 + n0)" "t0 + min(n0, 0)")
(cons "min(t0 - n0, t0 - n1)" "t0 - max(n0, n1)")
(cons "min(t0 - n0, t0 + n1)" "t0 + min(0 - n0, n1)")
(cons "min(t0 + n0, t0 - n1)" "t0 + min(n0, 0 - n1)")
(cons "min(t0 - n0, t1 - n0)" "min(t0, t1) - n0")
(cons "min(t0 - n0, t0)" "t0 - max(n0, 0)")
(cons "min(t0, t0 - n0)" "t0 - max(n0, 0)")
(cons "n0 && t0" "t0 && n0")
(cons "t0 && t0" "t0")
(cons "(t0 && n0) && t1" "(t0 && t1) && n0")
(cons "n0 || t0" "t0 || n0")
(cons "t0 || t0" "t0")
(cons "(t0 || n0) || t1" "(t0 || t1) || n0")
(cons "n0 == t0" "t0 == n0")
(cons "(t0 + n1) == n0" "t0 == (n0 - n1)")
(cons "(t0 - n1) == n0" "t0 == (n1 + n0)")
(cons "(t0 * -1) == n0" "t0 == (0 - n0)")
(cons "n0 < t0" "t0 > n0")
(cons "(t0 + n1) < n0" "t0 < (n0 - n1)")
(cons "(t0 - n1) < n0" "t0 < (n1 + n0)")
(cons "(t0 * -1) < n0" "t0 > (0 - n0)")
(cons "n0 <= t0" "t0 >= n0")
(cons "(t0 + n1) <= n0" "t0 <= (n0 - n1)")
(cons "(t0 - n1) <= n0" "t0 <= (n1 + n0)")
(cons "(t0 * -1) <= n0" "t0 >= (0 - n0)")
(cons "n0 > t0" "t0 < n0")
(cons "(t0 + n1) > n0" "t0 > (n0 - n1)")
(cons "(t0 - n1) > n0" "t0 > (n1 + n0)")
(cons "(t0 * -1) > n0" "t0 < (0 - n0)")
(cons "n0 >= t0" "t0 <= n0")
(cons "(t0 + n1) >= n0" "t0 >= (n0 - n1)")
(cons "(t0 - n1) >= n0" "t0 >= (n1 + n0)")
(cons "(t0 * -1) >= n0" "t0 <= (0 - n0)")
))

(define originalvarsolverTRS
  (for/list ([r originalvarsolverTRS-halide])
    (cons (halide->termIR (car r)) (halide->termIR (cdr r)))))

(define input-halidestr "(max(min((x*y) + z, z + (x*y)), (x*y) + z) - min(min((x*y) + z, z + (x*y)), (x*y) + z))")

(define (normalize halidestr tvar)
  (termIR->halide (varsolver-rewrite* tvar originalvarsolverTRS (halide->termIR input-halidestr))))

(define (normalize->termIR halidestr tvar)
  (varsolver-rewrite* tvar originalvarsolverTRS (halide->termIR input-halidestr)))